//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class RenewSubscriptionResponse {

	public class FinanceInformation {
		public String bankAccountAccountingCode {get;set;} 
		public String bankAccountAccountingCodeType {get;set;} 
		public String unappliedPaymentAccountingCode {get;set;} 
		public String unappliedPaymentAccountingCodeType {get;set;} 
		public String transferredToAccounting {get;set;} 

		public FinanceInformation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'bankAccountAccountingCode') {
							bankAccountAccountingCode = parser.getText();
						} else if (text == 'bankAccountAccountingCodeType') {
							bankAccountAccountingCodeType = parser.getText();
						} else if (text == 'unappliedPaymentAccountingCode') {
							unappliedPaymentAccountingCode = parser.getText();
						} else if (text == 'unappliedPaymentAccountingCodeType') {
							unappliedPaymentAccountingCodeType = parser.getText();
						} else if (text == 'transferredToAccounting') {
							transferredToAccounting = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FinanceInformation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String id {get;set;} 
	public String number_Z {get;set;} // in json: number
	public String status {get;set;} 
	public String type {get;set;} 
	public String accountId {get;set;} 
	public String accountNumber {get;set;} 
	public Double amount {get;set;} 
	public Double appliedAmount {get;set;} 
	public Double unappliedAmount {get;set;} 
	public Double refundAmount {get;set;} 
	public Double creditBalanceAmount {get;set;} 
	public String currency_Z {get;set;} // in json: currency
	public String effectiveDate {get;set;} 
	public Object comment {get;set;} 
	public String paymentMethodId {get;set;} 
	public Object paymentMethodSnapshotId {get;set;} 
	public Object authTransactionId {get;set;} 
	public Object bankIdentificationNumber {get;set;} 
	public Object gatewayId {get;set;} 
	public Object gatewayOrderId {get;set;} 
	public Object gatewayResponse {get;set;} 
	public Object gatewayResponseCode {get;set;} 
	public String gatewayState {get;set;} 
	public Object markedForSubmissionOn {get;set;} 
	public Object referenceId {get;set;} 
	public Object secondPaymentReferenceId {get;set;} 
	public Object softDescriptor {get;set;} 
	public Object softDescriptorPhone {get;set;} 
	public Object submittedOn {get;set;} 
	public Object settledOn {get;set;} 
	public Object cancelledOn {get;set;} 
	public String createdDate {get;set;} 
	public String createdById {get;set;} 
	public String updatedDate {get;set;} 
	public String updatedById {get;set;} 
	public String PrepaidPeriods {get;set;} 
	public Object HomeCurrencyRate {get;set;} 
	public Object DistributorOriginalPaymentSource {get;set;} 
	public Object AccountCurrencyAmount {get;set;} 
	public String OrderNumber {get;set;} 
	public String OperatorAgent {get;set;} 
	public Object HomeCurrencyAmount {get;set;} 
	public String Processing {get;set;} 
	public String HomeCurrency {get;set;} 
	public String PaymentProcessor {get;set;} 
	public Object DistributorPaymentSource {get;set;} 
	public String SourceOperator {get;set;} 
	public String Source {get;set;} 
	public FinanceInformation financeInformation {get;set;} 
	public Object gatewayReconciliationStatus {get;set;} 
	public Object gatewayReconciliationReason {get;set;} 
	public Object payoutId {get;set;} 
	public Boolean success {get;set;} 

	public RenewSubscriptionResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getText();
					} else if (text == 'number') {
						number_Z = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'type') {
						type = parser.getText();
					} else if (text == 'accountId') {
						accountId = parser.getText();
					} else if (text == 'accountNumber') {
						accountNumber = parser.getText();
					} else if (text == 'amount') {
						amount = parser.getDoubleValue();
					} else if (text == 'appliedAmount') {
						appliedAmount = parser.getDoubleValue();
					} else if (text == 'unappliedAmount') {
						unappliedAmount = parser.getDoubleValue();
					} else if (text == 'refundAmount') {
						refundAmount = parser.getDoubleValue();
					} else if (text == 'creditBalanceAmount') {
						creditBalanceAmount = parser.getDoubleValue();
					} else if (text == 'currency') {
						currency_Z = parser.getText();
					} else if (text == 'effectiveDate') {
						effectiveDate = parser.getText();
					} else if (text == 'comment') {
						comment = parser.readValueAs(Object.class);
					} else if (text == 'paymentMethodId') {
						paymentMethodId = parser.getText();
					} else if (text == 'paymentMethodSnapshotId') {
						paymentMethodSnapshotId = parser.readValueAs(Object.class);
					} else if (text == 'authTransactionId') {
						authTransactionId = parser.readValueAs(Object.class);
					} else if (text == 'bankIdentificationNumber') {
						bankIdentificationNumber = parser.readValueAs(Object.class);
					} else if (text == 'gatewayId') {
						gatewayId = parser.readValueAs(Object.class);
					} else if (text == 'gatewayOrderId') {
						gatewayOrderId = parser.readValueAs(Object.class);
					} else if (text == 'gatewayResponse') {
						gatewayResponse = parser.readValueAs(Object.class);
					} else if (text == 'gatewayResponseCode') {
						gatewayResponseCode = parser.readValueAs(Object.class);
					} else if (text == 'gatewayState') {
						gatewayState = parser.getText();
					} else if (text == 'markedForSubmissionOn') {
						markedForSubmissionOn = parser.readValueAs(Object.class);
					} else if (text == 'referenceId') {
						referenceId = parser.readValueAs(Object.class);
					} else if (text == 'secondPaymentReferenceId') {
						secondPaymentReferenceId = parser.readValueAs(Object.class);
					} else if (text == 'softDescriptor') {
						softDescriptor = parser.readValueAs(Object.class);
					} else if (text == 'softDescriptorPhone') {
						softDescriptorPhone = parser.readValueAs(Object.class);
					} else if (text == 'submittedOn') {
						submittedOn = parser.readValueAs(Object.class);
					} else if (text == 'settledOn') {
						settledOn = parser.readValueAs(Object.class);
					} else if (text == 'cancelledOn') {
						cancelledOn = parser.readValueAs(Object.class);
					} else if (text == 'createdDate') {
						createdDate = parser.getText();
					} else if (text == 'createdById') {
						createdById = parser.getText();
					} else if (text == 'updatedDate') {
						updatedDate = parser.getText();
					} else if (text == 'updatedById') {
						updatedById = parser.getText();
					} else if (text == 'PrepaidPeriods__c') {
						PrepaidPeriods = parser.getText();
					} else if (text == 'HomeCurrencyRate__c') {
						HomeCurrencyRate = parser.readValueAs(Object.class);
					} else if (text == 'DistributorOriginalPaymentSource__c') {
						DistributorOriginalPaymentSource = parser.readValueAs(Object.class);
					} else if (text == 'AccountCurrencyAmount__c') {
						AccountCurrencyAmount = parser.readValueAs(Object.class);
					} else if (text == 'OrderNumber__c') {
						OrderNumber = parser.getText();
					} else if (text == 'OperatorAgent__c') {
						OperatorAgent = parser.getText();
					} else if (text == 'HomeCurrencyAmount__c') {
						HomeCurrencyAmount = parser.readValueAs(Object.class);
					} else if (text == 'Processing__c') {
						Processing = parser.getText();
					} else if (text == 'HomeCurrency__c') {
						HomeCurrency = parser.getText();
					} else if (text == 'PaymentProcessor__c') {
						PaymentProcessor = parser.getText();
					} else if (text == 'DistributorPaymentSource__c') {
						DistributorPaymentSource = parser.readValueAs(Object.class);
					} else if (text == 'SourceOperator__c') {
						SourceOperator = parser.getText();
					} else if (text == 'Source__c') {
						Source = parser.getText();
					} else if (text == 'financeInformation') {
						financeInformation = new FinanceInformation(parser);
					} else if (text == 'gatewayReconciliationStatus') {
						gatewayReconciliationStatus = parser.readValueAs(Object.class);
					} else if (text == 'gatewayReconciliationReason') {
						gatewayReconciliationReason = parser.readValueAs(Object.class);
					} else if (text == 'payoutId') {
						payoutId = parser.readValueAs(Object.class);
					} else if (text == 'success') {
						success = parser.getBooleanValue();
					} else {
						System.debug(LoggingLevel.WARN, 'RenewSubscriptionResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static RenewSubscriptionResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new RenewSubscriptionResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	






}